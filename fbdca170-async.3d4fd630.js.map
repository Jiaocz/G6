{"version":3,"sources":["docs/api/layouts/GridLayout.zh.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/G6/G6/packages/site/docs/api/layouts/GridLayout.zh.md?watch=parent';\n  export const texts = [{\"value\":\"示例\",\"paraId\":0},{\"value\":\"// Assign layout options when initialization. const layout = new GridLayout(\",\"paraId\":1},{\"value\":\"{ rows: 10 }\",\"paraId\":1},{\"value\":\"); const positions = await layout.execute(graph); // { nodes: [], edges: [] }\",\"paraId\":1},{\"value\":\"// Or use different options later. const layout = new GridLayout(\",\"paraId\":2},{\"value\":\"{ rows: 10 }\",\"paraId\":2},{\"value\":\"); const positions = await layout.execute(graph, { rows: 20 }\",\"paraId\":2},{\"value\":\"); // { nodes: [], edges: [] }\",\"paraId\":2},{\"value\":\"// If you want to assign the positions directly to the nodes, use assign method. await layout.assign(graph, { rows: 20 }\",\"paraId\":3},{\"value\":\");\",\"paraId\":3},{\"value\":\"PointTuple\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"网格开始位置（左上角）\",\"paraId\":5,\"tocIndex\":1},{\"value\":\"number\",\"paraId\":6,\"tocIndex\":2},{\"value\":\"网格的列数，为 undefined 时算法根据节点数量、布局空间、rows（若指定）自动计算\",\"paraId\":7,\"tocIndex\":2},{\"value\":\"boolean\",\"paraId\":8,\"tocIndex\":3},{\"value\":\"为 false 时表示利用所有可用画布空间，为 true 时表示利用最小的画布空间\",\"paraId\":9,\"tocIndex\":3},{\"value\":\"number\",\"paraId\":10,\"tocIndex\":4},{\"value\":\"网格布局的总高度\",\"paraId\":11,\"tocIndex\":4},{\"value\":\" 在 G6 中使用当前容器的高度作为 grid 布局 height 的默认值。单独使用此布局时默认值为 300\",\"paraId\":12,\"tocIndex\":4},{\"value\":\"number | number[] | ((nodeData:\",\"paraId\":13,\"tocIndex\":5},{\"value\":\" \",\"paraId\":13,\"tocIndex\":5},{\"value\":\"Node\",\"paraId\":13,\"tocIndex\":5},{\"value\":\") => number)\",\"paraId\":13,\"tocIndex\":5},{\"value\":\"节点大小（直径）。用于防止节点重叠时的碰撞检测\",\"paraId\":14,\"tocIndex\":5},{\"value\":\"((node?:\",\"paraId\":15,\"tocIndex\":6},{\"value\":\" \",\"paraId\":15,\"tocIndex\":6},{\"value\":\"Node\",\"paraId\":15,\"tocIndex\":6},{\"value\":\") => number) | number\",\"paraId\":15,\"tocIndex\":6},{\"value\":\"环与环之间最小间距，用于调整半径\",\"paraId\":16,\"tocIndex\":6},{\"value\":\"(node?:\",\"paraId\":17,\"tocIndex\":7},{\"value\":\" \",\"paraId\":17,\"tocIndex\":7},{\"value\":\"Node\",\"paraId\":17,\"tocIndex\":7},{\"value\":\") => { row?: number; col?: number; }\",\"paraId\":17,\"tocIndex\":7},{\"value\":\"指定每个节点所在的行和列\",\"paraId\":18,\"tocIndex\":7},{\"value\":\"boolean\",\"paraId\":19,\"tocIndex\":8},{\"value\":\"是否防止重叠\",\"paraId\":20,\"tocIndex\":8},{\"value\":\" 必须配合下面属性 nodeSize 或节点数据中的 data.size 属性，只有在数据中设置了 data.size 或在该布局中配置了与当前图节点大小相同的 nodeSize 值，才能够进行节点重叠的碰撞检测\",\"paraId\":21,\"tocIndex\":8},{\"value\":\"number\",\"paraId\":22,\"tocIndex\":9},{\"value\":\"避免重叠时节点的间距 padding。preventOverlap 为 true 时生效\",\"paraId\":23,\"tocIndex\":9},{\"value\":\"number\",\"paraId\":24,\"tocIndex\":10},{\"value\":\"网格的行数，为 undefined 时算法根据节点数量、布局空间、cols（若指定）自动计算\",\"paraId\":25,\"tocIndex\":10},{\"value\":\"string\",\"paraId\":26,\"tocIndex\":11},{\"value\":\"指定排序的依据（节点属性名），数值越高则该节点被放置得越中心。若为 undefined，则会计算节点的度数，度数越高，节点将被放置得越中心\",\"paraId\":27,\"tocIndex\":11},{\"value\":\"number\",\"paraId\":28,\"tocIndex\":12},{\"value\":\"网格布局的总宽度\",\"paraId\":29,\"tocIndex\":12},{\"value\":\" 在 G6 中使用当前容器的宽度作为 grid 布局 width 的默认值。单独使用此布局时默认值为 300\",\"paraId\":30,\"tocIndex\":12},{\"value\":\"To directly assign the positions to the nodes.\",\"paraId\":31,\"tocIndex\":14},{\"value\":\"assign(graph: Graph, options?: GridLayoutOptions): Promise<void>;\\n\",\"paraId\":32,\"tocIndex\":14},{\"value\":\"相关参数\",\"paraId\":33},{\"value\":\"参数\",\"paraId\":34,\"tocIndex\":14},{\"value\":\"类型\",\"paraId\":35,\"tocIndex\":14},{\"value\":\"描述\",\"paraId\":36,\"tocIndex\":14},{\"value\":\"graph\",\"paraId\":37,\"tocIndex\":14},{\"value\":\"Graph\",\"paraId\":38,\"tocIndex\":14},{\"value\":\"options\",\"paraId\":39,\"tocIndex\":14},{\"value\":\"GridLayoutOptions\",\"paraId\":40,\"tocIndex\":14},{\"value\":\"返回值\",\"paraId\":41,\"tocIndex\":14},{\"value\":\"：\",\"paraId\":41,\"tocIndex\":14},{\"value\":\"类型：\",\"paraId\":42,\"tocIndex\":14},{\"value\":\"Promise<void>\",\"paraId\":42,\"tocIndex\":14},{\"value\":\"Return the positions of nodes and edges(if needed).\",\"paraId\":43,\"tocIndex\":15},{\"value\":\"execute(graph: Graph, options?: GridLayoutOptions): Promise<LayoutMapping>;\\n\",\"paraId\":44,\"tocIndex\":15},{\"value\":\"相关参数\",\"paraId\":33},{\"value\":\"参数\",\"paraId\":45,\"tocIndex\":15},{\"value\":\"类型\",\"paraId\":46,\"tocIndex\":15},{\"value\":\"描述\",\"paraId\":47,\"tocIndex\":15},{\"value\":\"graph\",\"paraId\":48,\"tocIndex\":15},{\"value\":\"Graph\",\"paraId\":49,\"tocIndex\":15},{\"value\":\"options\",\"paraId\":50,\"tocIndex\":15},{\"value\":\"GridLayoutOptions\",\"paraId\":51,\"tocIndex\":15},{\"value\":\"返回值\",\"paraId\":52,\"tocIndex\":15},{\"value\":\"：\",\"paraId\":52,\"tocIndex\":15},{\"value\":\"类型：\",\"paraId\":53,\"tocIndex\":15},{\"value\":\"Promise<LayoutMapping>\",\"paraId\":53,\"tocIndex\":15}];\n  "],"names":[],"mappings":"6PAEe,6CAAA,QADN,YACA,IAAM,EAAQ,CAAC,CAAC,MAAQ,eAAK,OAAS,CAAC,EAAE,CAAC,MAAQ,+EAA+E,OAAS,CAAC,EAAE,CAAC,MAAQ,eAAe,OAAS,CAAC,EAAE,CAAC,MAAQ,gFAAgF,OAAS,CAAC,EAAE,CAAC,MAAQ,oEAAoE,OAAS,CAAC,EAAE,CAAC,MAAQ,eAAe,OAAS,CAAC,EAAE,CAAC,MAAQ,gEAAgE,OAAS,CAAC,EAAE,CAAC,MAAQ,iCAAiC,OAAS,CAAC,EAAE,CAAC,MAAQ,2HAA2H,OAAS,CAAC,EAAE,CAAC,MAAQ,KAAK,OAAS,CAAC,EAAE,CAAC,MAAQ,aAAa,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,qEAAc,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,SAAS,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,4MAAiD,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,UAAU,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,wLAA4C,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,SAAS,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,mDAAW,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,0NAA0D,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,kCAAkC,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,IAAI,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,OAAO,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,eAAe,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,6IAA0B,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,WAAW,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,IAAI,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,OAAO,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,wBAAwB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,mGAAmB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,UAAU,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,IAAI,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,OAAO,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,uCAAuC,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,2EAAe,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,UAAU,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,uCAAS,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,waAA6G,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,SAAS,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,0HAA+C,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,SAAS,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,4MAAiD,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,SAAS,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,+WAAwE,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,SAAS,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,mDAAW,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,yNAAyD,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,iDAAiD,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,sEAAsE,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,2BAAO,OAAS,EAAE,EAAE,CAAC,MAAQ,eAAK,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,eAAK,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,eAAK,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,QAAQ,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,QAAQ,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,UAAU,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,oBAAoB,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,qBAAM,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,SAAI,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,qBAAM,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,gBAAgB,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,sDAAsD,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,gFAAgF,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,2BAAO,OAAS,EAAE,EAAE,CAAC,MAAQ,eAAK,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,eAAK,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,eAAK,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,QAAQ,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,QAAQ,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,UAAU,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,oBAAoB,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,qBAAM,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,SAAI,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,qBAAM,OAAS,GAAG,SAAW,EAAE,EAAE,CAAC,MAAQ,yBAAyB,OAAS,GAAG,SAAW,EAAE,EAAE"}