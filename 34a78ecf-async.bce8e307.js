(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]||[]).push([["34a78ecf"],{"34a78ecf":function(a,e,d){"use strict";d.d(e,"__esModule",{value:!0}),d.d(e,"texts",{enumerable:!0,get:function(){return t;}}),d("a4c32170");let t=[{value:"Example",paraId:0},{value:"// Assign layout options when initialization. const layout = new CircularLayout(",paraId:1},{value:"{ radius: 10 }",paraId:1},{value:"); const positions = await layout.execute(graph); // { nodes: [], edges: [] }",paraId:1},{value:"// Or use different options later. const layout = new CircularLayout(",paraId:2},{value:"{ radius: 10 }",paraId:2},{value:"); const positions = await layout.execute(graph, { radius: 20 }",paraId:2},{value:"); // { nodes: [], edges: [] }",paraId:2},{value:"// If you want to assign the positions directly to the nodes, use assign method. await layout.assign(graph, { radius: 20 }",paraId:3},{value:");",paraId:3},{value:"number",paraId:4,tocIndex:1},{value:"The distance between the first node and the last node is separated by how many 2*PI 1",paraId:5,tocIndex:1},{value:"PointTuple",paraId:6,tocIndex:2},{value:"Layout center",paraId:7,tocIndex:2},{value:"boolean",paraId:8,tocIndex:3},{value:"Whether to arrange clockwise true",paraId:9,tocIndex:3},{value:"number",paraId:10,tocIndex:4},{value:"Number of segments (how many segments will be evenly distributed)",paraId:11,tocIndex:4},{value:" It takes effect when endRadius - startRadius != 0 1",paraId:12,tocIndex:4},{value:"number",paraId:13,tocIndex:5},{value:"End angle",paraId:14,tocIndex:5},{value:"number | null",paraId:15,tocIndex:6},{value:"Spiral layout end radius null",paraId:16,tocIndex:6},{value:"number",paraId:17,tocIndex:7},{value:"Layout height",paraId:18,tocIndex:7},{value:"number | number[] | ((nodeData:",paraId:19,tocIndex:8},{value:" ",paraId:19,tocIndex:8},{value:"Node",paraId:19,tocIndex:8},{value:") => number)",paraId:19,tocIndex:8},{value:"Node size (diameter). Used for collision detection when nodes overlap",paraId:20,tocIndex:8},{value:"((node?:",paraId:21,tocIndex:9},{value:" ",paraId:21,tocIndex:9},{value:"Node",paraId:21,tocIndex:9},{value:") => number) | number",paraId:21,tocIndex:9},{value:"Minimum spacing between rings, used to adjust the radius",paraId:22,tocIndex:9},{value:"'topology' | 'topology-directed' | 'degree' | null",paraId:23,tocIndex:10},{value:"\u8282\u70B9\u5728\u73AF\u4E0A\u6392\u5E8F\u7684\u4F9D\u636E",paraId:24,tocIndex:10},{value:"null: \u76F4\u63A5\u4F7F\u7528\u6570\u636E\u4E2D\u7684\u987A\u5E8F",paraId:25,tocIndex:10},{value:"'topology': \u6309\u7167\u62D3\u6251\u6392\u5E8F",paraId:26,tocIndex:10},{value:"'topology-directed': \u6309\u7167\u62D3\u6251\u6392\u5E8F\uFF08\u6709\u5411\u56FE\uFF09",paraId:27,tocIndex:10},{value:"'degree': \u6309\u7167\u5EA6\u6570\u5927\u5C0F\u6392\u5E8F ",paraId:28,tocIndex:10},{value:" Sorting basis of nodes on the ring",paraId:28,tocIndex:10},{value:"null: Use the order in the data directly",paraId:29,tocIndex:10},{value:"'topology': Sort according to topological order",paraId:30,tocIndex:10},{value:"'topology-directed': Sort according to topological order (directed graph)",paraId:31,tocIndex:10},{value:"'degree': Sort according to degree size null",paraId:32,tocIndex:10},{value:"number | null",paraId:33,tocIndex:11},{value:"Circle radius",paraId:34,tocIndex:11},{value:" If radius is set, startRadius and endRadius will not take effect null",paraId:35,tocIndex:11},{value:"number",paraId:36,tocIndex:12},{value:"Start angle",paraId:37,tocIndex:12},{value:"number | null",paraId:38,tocIndex:13},{value:"Spiral layout start radius null",paraId:39,tocIndex:13},{value:"number",paraId:40,tocIndex:14},{value:"Layout width",paraId:41,tocIndex:14},{value:"To directly assign the positions to the nodes.",paraId:42,tocIndex:16},{value:"assign(graph: Graph, options?: CircularLayoutOptions): Promise<void>;\n",paraId:43,tocIndex:16},{value:"View Parameters",paraId:44},{value:"Parameter",paraId:45,tocIndex:16},{value:"Type",paraId:46,tocIndex:16},{value:"Description",paraId:47,tocIndex:16},{value:"graph",paraId:48,tocIndex:16},{value:"Graph",paraId:49,tocIndex:16},{value:"options",paraId:50,tocIndex:16},{value:"CircularLayoutOptions",paraId:51,tocIndex:16},{value:"Returns",paraId:52,tocIndex:16},{value:":",paraId:52,tocIndex:16},{value:"Type:",paraId:53,tocIndex:16},{value:" Promise<void>",paraId:53,tocIndex:16},{value:"Return the positions of nodes and edges(if needed).",paraId:54,tocIndex:17},{value:"execute(graph: Graph, options?: CircularLayoutOptions): Promise<LayoutMapping>;\n",paraId:55,tocIndex:17},{value:"View Parameters",paraId:44},{value:"Parameter",paraId:56,tocIndex:17},{value:"Type",paraId:57,tocIndex:17},{value:"Description",paraId:58,tocIndex:17},{value:"graph",paraId:59,tocIndex:17},{value:"Graph",paraId:60,tocIndex:17},{value:"options",paraId:61,tocIndex:17},{value:"CircularLayoutOptions",paraId:62,tocIndex:17},{value:"Returns",paraId:63,tocIndex:17},{value:":",paraId:63,tocIndex:17},{value:"Type:",paraId:64,tocIndex:17},{value:" Promise<LayoutMapping>",paraId:64,tocIndex:17}];}}]);
//# sourceMappingURL=34a78ecf-async.bce8e307.js.map